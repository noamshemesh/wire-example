// Code generated by MockGen. DO NOT EDIT.
// Source: car.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCar is a mock of Car interface
type MockCar struct {
	ctrl     *gomock.Controller
	recorder *MockCarMockRecorder
}

// MockCarMockRecorder is the mock recorder for MockCar
type MockCarMockRecorder struct {
	mock *MockCar
}

// NewMockCar creates a new mock instance
func NewMockCar(ctrl *gomock.Controller) *MockCar {
	mock := &MockCar{ctrl: ctrl}
	mock.recorder = &MockCarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCar) EXPECT() *MockCarMockRecorder {
	return m.recorder
}

// Drive mocks base method
func (m *MockCar) Drive(ctx context.Context, address string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Drive", ctx, address)
}

// Drive indicates an expected call of Drive
func (mr *MockCarMockRecorder) Drive(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drive", reflect.TypeOf((*MockCar)(nil).Drive), ctx, address)
}
